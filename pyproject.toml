#### black ####################################################################
[tool.black]
skip-magic-trailing-comma = true
target-version = ["py311"]

#### pyright ##################################################################
[tool.pyright]
include = ["app"]
exclude = ["**/__pycache__", ".direnv", ".git", ".venv", "app/migrations/models"]
pythonVersion= "3.11"
executionEnvironments = [{ root = "." }]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportIncompatibleMethodOverride = false
reportMissingTypeArgument = false
reportPrivateUsage = false
reportPrivateImportUsage = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUntypedBaseClass = false
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "error"

#### ruff #####################################################################
[tool.ruff]
exclude = ["migrations/**"]
ignore = [
  "ANN101", # flake8-annotations, missing-type-self
  "ANN102", # flake8-annotations, missing-type-cls
  "ANN401", # flake8-annotations, dynamically-typed-expression
  "B008",  # flake8-bugbear, function-call-argument-default
  "COM812",  # flake8-commas, trailing-comma-missing
  "D", # pydocstyle
  "PD", # pandas-vet
  "PLR0913", # refactor, too-many-arguments
  "PT012", # flake8-pytest-style, raises-with-multiple-statements
  "PT013", # flake8-pytest-style, incorrect-pytest-import
  "TCH001", # flake8-type-checking, typing-only-first-party-import
  "TCH002", # flake8-type-checking, typing-only-third-party-import
  "TCH003", # flake8-type-checking, typing-only-standard-library-import
  "TRY200", # tryceratops, reraise-no-cause
  "TRY301", # tryceratops, raise-within-try

]
select = ["ALL"]
src = ["app", "tests"]
target-version = "py311"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"src/tests/**/*.py" = [
  "FBT001", # flake8-boolean-trap, boolean-positional-arg-in-function-definition
  "FBT003", # flake8-boolean-trap, boolean-positional-value-in-function-call
  "PLR2004", # refactor, magic-value-comparison
  "S101", # flake8-bandit, assert-used

]
